{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About Pajama","text":""},{"location":"about/#whats-pajama","title":"What's Pajama?","text":"<p>Pajama is a build system which enables software developers to build software quickly and easily. It lets them leverage skills and knowledge they already have, instead of forcing them to learn something new.</p> <p>Software developers already know how to build code. A C++ developer, for example, knows how to use a compiler to turn a source code file into an object file, and how to then use a linker to combine object files into a library or executable. They've known this since their very first days working with a compiled language. However, as software projects grow, it quickly becomes necessary to automate these manual steps. Otherwise the build process becomes time consuming and error prone.</p>"},{"location":"about/#enter-the-build-system","title":"Enter the build system.","text":"<p>A build system ensures these steps are done correctly every time, and only as required. But at this point, every build system forces the software developer to learn a new paradigm and syntax to describe how to create the executable. Every build system, that is, except Pajama.</p>"},{"location":"about/#pajama-is-different","title":"Pajama is different.","text":"<p>Pajama lets software developers work with the build system in ways they've understood since they were beginners.</p> <p>Pajama lets software developers describe the steps of a build sequentially. It allows them to use the output artifacts from one build step as input artifacts to the next build step. Pajama infers dependencies between artifacts based on how the build is described. And the build is described using simple Python -- a language most software developers already know.</p> <p>Build problems can easily eat up days of a software developer's time. They are often caused by a build system which is difficult to learn and therefore poorly understood.</p>"},{"location":"about/#win-win-win","title":"Win-win-win.","text":"<p>Pajama improves your software development process in three important ways:</p> <ol> <li>Save money by reducing developer time spent wrestling with the build system.</li> <li>Developers instead spend their time writing software to make your customers happy.</li> <li>Your developers are happier because they spend more time doing what they love to do -- writing code.</li> </ol>"},{"location":"about/#ready-to-learn-more","title":"Ready to learn more?","text":"<p>Try the tutorial to see Pajama in action.</p>"},{"location":"cli/","title":"Command Line Interface","text":"<p>TODO: Document pajama CLI, ideally by deriving the documentation from the CLI help output.</p>"},{"location":"snippets/","title":"Snippets","text":"<p>Tip</p> <p>Tip content</p> <p>Note</p> <p>Note content</p> Expandable ### Header 1. item 2. item  <p>https://squidfunk.github.io/mkdocs-material/reference/code-blocks/</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#download-and-install-pajama","title":"Download and Install Pajama","text":"<p>Note</p> <p>The version number shown here will change as new versions of Pajama are released. If you are reading this to reinstall Pajama, first refresh this page.</p> <pre><code>curl -L -o pajama-0.1.20250423103249-py3-none-any.whl https://joshcameron.github.io/pajama-docs/package/pajama-0.1.20250423103249-py3-none-any.whl\npython3 -m pip install pajama-0.1.20250423103249-py3-none-any.whl\n</code></pre> <p>The Pajama Python package contains a command line tool called <code>pajama</code> which is used to build projects. You can choose to install Pajama in your system Python as shown above, or in a virtual environment. If you choose to install Pajama in a virtual environment, you will need to activate the virtual environment before running the <code>pajama</code> command.</p>"},{"location":"tutorial/#clone-the-tutorial-code","title":"Clone the tutorial code","text":"<p>An example project is available on GitHub. Clone it to your local machine and follow along with the documentation below to learn how to use Pajama.</p> <pre><code>git clone git@github.com:joshcameron/pajama-tutorial.git\ncd pajama-tutorial\n</code></pre> <p>Some additional information</p>"},{"location":"tutorial/#understand-the-project","title":"Understand the project","text":"<p>In pajama-tutorial, you will find a simple C++ project containing the following files and directories:</p> <pre><code>pajama-tutorial\n\u251c\u2500\u2500 .pajama\n\u251c\u2500\u2500 .pajama-project\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.toml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 .pajama\n    \u251c\u2500\u2500 a.cpp\n    \u251c\u2500\u2500 a.h\n    \u251c\u2500\u2500 b.cpp\n    \u251c\u2500\u2500 b.h\n    \u251c\u2500\u2500 c.cpp\n    \u2514\u2500\u2500 main.cpp\n</code></pre>"},{"location":"tutorial/#a-pajama-project-the-pajama-project-directory","title":"A Pajama project / The .pajama-project directory","text":"<p>The <code>.pajama-project</code> directory identifies the parent directory as the \"project directory\" -- the root directory of a Pajama project.</p> <p>When you use the <code>pajama</code> command at the prompt, the first thing it does is attempt to determine what Pajama project it is working with. It looks in the current directory and upwards through the parent directory hierarchy for a <code>.pajama-project</code> subdirectory.</p> <p>The <code>.pajama-project</code> directory initially contains a <code>config.toml</code> file, which specifies configuration options for the project. As you work with Pajama, other files may be created in this directory.</p>"},{"location":"tutorial/#pajama-files","title":".pajama files","text":"<p>Your project directory and the <code>src</code> directory below it both contain <code>.pajama</code> files. These files describe how to build the project. Each file describes how to build the contents of its directory.</p> <p><code>.pajama</code> files are Python files. If you already know Python, you are well on your way to writing Pajama code.</p> <p>Let's take a look at the <code>.pajama</code> file in the <code>src</code> directory. It looks like this:</p> <pre><code>\n</code></pre> <ul> <li>A <code>.pajama</code> file can include subdirectories (containing <code>.pajama</code> files).</li> <li><code>.pajama</code> files do three (?) things: call functions which invoke actions, modify settings, and   include subdirectories.</li> <li>Settings are stored in a stack. If a <code>.pajama</code> file includes a subdirectory, when control returns   from the subdirectory to that <code>.pajama</code> file, any settings set in the subdirectory are popped from   the stack, and the build settings are as they were before the subdirectory was included.</li> <li>Settings from a parent directory are inherited by the subdirectory when the parent directory   <code>.pajama</code> file includes the subdirectory.</li> </ul>"},{"location":"tutorial/#initial-build-full-build-clean-build","title":"Initial build / full build / clean build","text":"<p><code>pajama</code></p> <p>Later:</p> <p><code>pajama --clean</code></p>"},{"location":"tutorial/#incremental-build","title":"Incremental build","text":"<p><code>pajama</code></p> <p>What's different? Pajama has inferred the dependencies of the build based on how build artifacts are created from other artifacts. For example, main.cpp is input artifact to a build action which creates output artifact a.out. Pajama has also cached information about the actions performed in the previous build. It knows that if main.cpp has not been modified, and the settings relevant to the action which creates a.out have not changed, then a.out does not need to be created again (assuming it still exists and hasn't been modified since the previous build). Pajama does only what needs to be done.</p>"},{"location":"tutorial/#features","title":"Features","text":"<ul> <li>Library to share code among multiple applications</li> <li>.cpp to .o</li> <li>.o to .so (dynamic library)</li> <li>.o to .a (static library)</li> <li>executable</li> <li>full build, then incremental: note that incremental is fast</li> <li>add .cpp to the build: note that other .cpps don't need to be rebuilt.</li> </ul>"},{"location":"tutorial/#current-limitations","title":"Current limitations","text":"<p>Pajama is currently in a very early alpha state. Only tested on macOS Only toolset is clang Many clang flags are not supported -- anything with multiple arguments to the flag (provide examples) Parallelism not supported Focus has been on demonstrating the key differentiating feature of pajama: it allows you to work with the build system in a much more intuitive way, because it's so similar to how you would manually build code from the command line.</p>"},{"location":"user-docs/clang/","title":"clang","text":"<p>This module declares no user facing functions. Invoke the clang compiler by using <code>pajama.cpp.select_compiler('clang.cpp.compiler')</code> to select the clang compiler and using <code>pajama.cpp.compile()</code> to compile.</p>"},{"location":"user-docs/cpp/","title":"cpp","text":""},{"location":"user-docs/cpp/#pajama.collection.pajama.cpp.compile_to_executable","title":"compile_to_executable","text":"<pre><code>compile_to_executable(src_file, dst_file_name=None, static_lib=None, dynamic_lib=None)\n</code></pre> <p>Compile a C++ source file to an executable file.</p> <p>Parameters:</p> Name Type Description Default <code>src_file</code> <code>str | FileArtifact</code> <p>The source file to compile.</p> required <code>dst_file_name</code> <code>str | None</code> <p>The name of the execuable file to create. If None, the execuable file                    will be created in the current build directory with the default name given to an                        executable by the current compiler.</p> <code>None</code>"},{"location":"user-docs/cpp/#pajama.collection.pajama.cpp.compile_to_object","title":"compile_to_object","text":"<pre><code>compile_to_object(src_file, dst_file_name=None)\n</code></pre> <p>Compile a C++ source file to an object file.</p> <p>Parameters:</p> Name Type Description Default <code>src_file</code> <code>str | FileArtifact</code> <p>The source file to compile.</p> required <code>dst_file_name</code> <code>str | None</code> <p>The name of the object file to create. If None, the object file                  will be created in the current build directory with a name based on the source file                     name, with the appropriate extension for an object file on this operating system.</p> <code>None</code>"},{"location":"user-docs/cpp/#pajama.collection.pajama.cpp.link_library","title":"link_library","text":"<pre><code>link_library(object_files, dst_file_name)\n</code></pre> <p>Link object files into a static or dynamic library.</p> <p>Parameters:</p> Name Type Description Default <code>object_files</code> <code>list</code> <p>The object files to link.</p> required <code>dst_file_name</code> <code>str</code> <p>The name of the library to create.</p> required"},{"location":"user-docs/cpp/#pajama.collection.pajama.cpp.select_compiler","title":"select_compiler","text":"<pre><code>select_compiler(tool_id, min_version=None, max_version=None)\n</code></pre> <p>Request the use of the specified compiler in the specified version range.</p> <p>Parameters:</p> Name Type Description Default <code>tool_id</code> <code>str</code> <p>The id of the compiler to use.</p> required <code>min_version</code> <code>str | None</code> <p>The minimum version of the compiler to use.</p> <code>None</code> <code>max_version</code> <code>str | None</code> <p>The maximum version of the compiler to use.</p> <code>None</code>"},{"location":"user-docs/filesystem/","title":"filesystem","text":"<p>Implements typical filesystem functionality, such as copying files and directories.</p>"},{"location":"user-docs/filesystem/#pajama.collection.pajama.filesystem.copy_dir","title":"copy_dir","text":"<pre><code>copy_dir(src_dir, dst_dir)\n</code></pre> <p>Copy a directory.</p> <p>Recursively copy the specified directory to the specified destination directory.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir</code> <code>DirectoryTreeArtifact | str</code> <p>The source directory. If <code>str</code>, <code>src_dir</code> can be an absolute path or a path </p> required <code>dst_dir</code> <code>DirectoryArtifact | str</code> <p>The destination directory. If <code>str</code>, <code>dst_dir</code> must be a path relative to setting</p> required <p>Example: <pre><code>&gt;&gt;&gt; some_string = 'hello'\n&gt;&gt;&gt; len(some_string)\n5\n</code></pre></p>"},{"location":"user-docs/filesystem/#pajama.collection.pajama.filesystem.copy_file","title":"copy_file","text":"<pre><code>copy_file(src_file, dst_dir, new_file_name=None)\n</code></pre> <p>Copy a file.</p> <p>Copy the specified file to the specified directory. The copy can be given a new name.</p> <p>Parameters:</p> Name Type Description Default <code>src_file</code> <code>FileArtifact | str</code> <p>Source file path (absolute, or relative to setting <code>build.current_src_dir</code>).</p> required <code>dst_dir</code> <code>DirectoryArtifact | StringArtifact | str</code> <p>Destination directory path (absolute, or relative to setting <code>build.current_build_dir</code>).</p> required <code>new_file_name</code> <code>str | None</code> <p>(Optional) New name for the copied file.</p> <code>None</code>"},{"location":"user-docs/filesystem/#pajama.collection.pajama.filesystem.make_directory","title":"make_directory","text":"<pre><code>make_directory(rel_path)\n</code></pre> <p>Make a directory, and any necessary non-existent parent directories.</p> <p>Parameters:</p> Name Type Description Default <code>rel_path</code> <code>str</code> <p>The path of the directory to be created, relative to the current build directory.</p> required"},{"location":"user-docs/log/","title":"log","text":""},{"location":"user-docs/log/#pajama.collection.pajama.log.critical","title":"critical","text":"<pre><code>critical(message, tag='untagged', stacklevel=3)\n</code></pre> <p>Log a critical error message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>tag</code> <p>A string that can be used to filter log messages.</p> <code>'untagged'</code> <code>stacklevel</code> <p>The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.</p> <code>3</code>"},{"location":"user-docs/log/#pajama.collection.pajama.log.debug","title":"debug","text":"<pre><code>debug(message, tag='untagged', stacklevel=3)\n</code></pre> <p>Log a debug message. Debug messages are prefaced with the file and line number where this function was called.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>tag</code> <p>A string that can be used to filter log messages.</p> <code>'untagged'</code> <code>stacklevel</code> <p>The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.</p> <code>3</code>"},{"location":"user-docs/log/#pajama.collection.pajama.log.debug_stack","title":"debug_stack","text":"<pre><code>debug_stack(tag='untagged', stacklevel=3)\n</code></pre> <p>Log the current stack trace.</p> <p>Args:</p> <pre><code>    tag: A string that can be used to filter log messages.\n    stacklevel: The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.\n</code></pre>"},{"location":"user-docs/log/#pajama.collection.pajama.log.error","title":"error","text":"<pre><code>error(message, tag='untagged', stacklevel=3)\n</code></pre> <p>Log an error message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>tag</code> <p>A string that can be used to filter log messages.</p> <code>'untagged'</code> <code>stacklevel</code> <p>The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.</p> <code>3</code>"},{"location":"user-docs/log/#pajama.collection.pajama.log.info","title":"info","text":"<pre><code>info(message, tag='untagged', stacklevel=3)\n</code></pre> <p>Log an informational message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>tag</code> <p>A string that can be used to filter log messages.</p> <code>'untagged'</code> <code>stacklevel</code> <p>The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.</p> <code>3</code>"},{"location":"user-docs/log/#pajama.collection.pajama.log.verbose_debug","title":"verbose_debug","text":"<pre><code>verbose_debug(message, tag='untagged', stacklevel=3)\n</code></pre> <p>Log a verbose debug message. A verbose debug message provides additional detail, and    is only logged if the verbose flag is set.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>tag</code> <p>A string that can be used to filter log messages.</p> <code>'untagged'</code> <code>stacklevel</code> <p>The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.</p> <code>3</code>"},{"location":"user-docs/log/#pajama.collection.pajama.log.warning","title":"warning","text":"<pre><code>warning(message, tag='untagged', stacklevel=3)\n</code></pre> <p>Log a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>tag</code> <p>A string that can be used to filter log messages.</p> <code>'untagged'</code> <code>stacklevel</code> <p>The number of stack frames to skip when determining the                     location of the log message. The default value of 3 is usually                  appropriate.</p> <code>3</code>"},{"location":"user-docs/settings/","title":"settings","text":""}]}